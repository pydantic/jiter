name: CI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

jobs:
  test-linux:
    name: test rust-${{ matrix.rust-version }} on linux
    strategy:
      fail-fast: false
      matrix:
        rust-version: [stable, nightly]

    runs-on: ubuntu-latest

    env:
      RUNS_ON: ubuntu-latest
      RUST_VERSION: ${{ matrix.rust-version }}

    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}

    - id: cache-rust
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v1-rust"

    - run: cargo install rustfilt coverage-prepare cargo-careful
      if: steps.cache-rust.outputs.cache-hit != 'true'

    - run: rustup component add llvm-tools-preview

    - run: cargo test -F python
      env:
        RUST_BACKTRACE: 1
        RUSTFLAGS: '-C instrument-coverage'

    - run: coverage-prepare --ignore-filename-regex '/tests/' lcov $(find target/debug/deps -regex '.*/main[^.]*')

    - run: cargo test --doc

    - run: cargo careful t -F python
      if: matrix.rust-version == 'nightly'

    - uses: codecov/codecov-action@v3
      with:
        env_vars: RUNS_ON,RUST_VERSION

  test-macos:
    name: test on ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [macos-latest, macos-latest-xlarge]

    runs-on: ${{ matrix.runs-on }}

    env:
      RUNS_ON: ${{ matrix.runs-on }}
      RUST_VERSION: stable

    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - uses: dtolnay/rust-toolchain@stable

    - id: cache-rust
      uses: Swatinem/rust-cache@v2

    - run: cargo install rustfilt coverage-prepare
      if: steps.cache-rust.outputs.cache-hit != 'true'

    - run: rustup component add llvm-tools-preview

    - run: cargo test -F python
      env:
        RUST_BACKTRACE: 1
        RUSTFLAGS: '-C instrument-coverage'

    - run: coverage-prepare --ignore-filename-regex '/tests/' lcov $(find target/debug/deps -regex '.*/main[^.]*')

    - run: cargo test --doc

    - uses: codecov/codecov-action@v3
      with:
        env_vars: RUNS_ON,RUST_VERSION

  bench:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: moonrepo/setup-rust@v1
      with:
        channel: stable
        cache-target: release
        bins: cargo-codspeed

    - run: python crates/jiter/benches/generate_big.py

    - run: cargo codspeed build -F python -p jiter

    - uses: CodSpeedHQ/action@v2
      with:
        run: cargo codspeed run
        token: ${{ secrets.CODSPEED_TOKEN }}

  fuzz:
    name: fuzz on ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-latest, macos-latest-xlarge]

    runs-on: ${{ matrix.runs-on }}

    steps:
    - uses: actions/checkout@v3

    - uses: moonrepo/setup-rust@v1
      with:
        channel: nightly
        cache-target: release
        bins: cargo-fuzz

    - run: cargo fuzz run --fuzz-dir crates/fuzz compare_to_serde --release -- -max_total_time=300s

  fuzz-skip:
    name: fuzz skip
    # we only run this on ubuntu since architecture should make no difference

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: moonrepo/setup-rust@v1
      with:
        channel: nightly
        cache-target: release
        bins: cargo-fuzz

    - run: cargo fuzz run --fuzz-dir crates/fuzz compare_skip --release -- -max_total_time=300s

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: moonrepo/setup-rust@v1
      with:
        channel: stable
        components: rustfmt, clippy

    - uses: pre-commit/action@v3.0.0
      with:
        extra_args: --all-files --verbose
      env:
        PRE_COMMIT_COLOR: always
        SKIP: test

    - run: cargo doc -F python

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [test-linux, test-macos, bench, fuzz, fuzz-skip, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  release:
    needs: [check]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    environment: release

    steps:
    - uses: actions/checkout@v2

    - name: install rust stable
      uses: dtolnay/rust-toolchain@stable

    - uses: Swatinem/rust-cache@v2

    - run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
